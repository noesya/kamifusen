<%
# image_tag options
options ||= {}
alt = options[:alt]
async = options.has_key?(:async)  ? options[:async]
                                  : true
klass = options[:class]
picture_class = options[:picture_class]
width = options[:width]
height = options[:height]
if  source&.metadata &&
    source.metadata['analyzed'] &&
    source.metadata.has_key?('width') &&
    source.metadata.has_key?('height')
  image_width = source.metadata['width']
  image_height = source.metadata['height']
  image_ratio = 1.0 * image_width / image_height
  if width.nil? && height.nil?
    # Prendre width et height réelles de l'image
    width = image_width
    height = image_height
  elsif width.nil?
    # Calculer la height sur ratio
    width = height * image_ratio
  elsif height.nil?
    # Calcule la width sur ratio
    height = width / image_ratio
  else
    # Width et height sont explicites,
    # si le ratio demandé n'est pas celui de l'image,
    # Redéfinir la height
    width = [image_width, width].min
    height = width / image_ratio
  end
  width = width.round
  height = height.round
end
parameters = ""
parameters += " loading=\"lazy\" decoding=\"async\"" if async
parameters += " alt=\"#{ alt }\"" if alt
parameters += " width=\"#{ width }\"" if width
parameters += " height=\"#{ height }\"" if height
parameters += " class=\"#{ klass }\"" if klass
%>
<% if source.variable? %>
  <%#= "#{image_width} x #{image_height}, #{image_ratio} ratio => #{width} x #{height}<br>".html_safe %>
  <%
  # kamifusen settings
  sizes = [320, 576, 640, 768, 992, 1152, 1200, 1400, 1536, 1984, 2400]
  quality = 80
  # Computing
  if width
    width_retina = width * 2
    sizes.reject! { |size| size > width_retina }
    sizes << width_retina
    sizes.uniq!
  end
  default_width = sizes.max
  default_width = width_retina if width_retina && width_retina > default_width
  if Kamifusen.with_webp
    srcset_webp = sizes.map { |size|
      "#{ url_for source.variant(resize: "#{size}>", format: :webp, quality: quality) } #{ size }w"
    }.join(', ')
  end
  srcset_default = sizes.map { |size|
    "#{ url_for source.variant(resize: "#{size}>", quality: quality) } #{ size }w"
  }.join(', ')
  default = url_for source.variant(resize: "#{default_width}>", quality: quality)
  %>
  <picture<%= " class=\"#{picture_class}\"".html_safe unless picture_class.blank? %>>
    <% if Kamifusen.with_webp %>
      <source srcset="<%= srcset_webp %>" type="image/webp">
    <% end %>
    <img src="<%= default %>" srcset="<%= srcset_default %>" type="<%= source.content_type %>"<%= raw parameters %>>
  </picture>
<% else %>
  <picture>
    <img src="<%= url_for source %>" type="<%= source.content_type %>"<%= raw parameters %>>
  </picture>
<% end %>
