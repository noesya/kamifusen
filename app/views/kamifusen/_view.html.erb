<%
options ||= {}
alt = options[:alt]
async = options.has_key?(:async) ? options[:async] : true
active_storage_direct_url = options.has_key?(:active_storage_direct_url) ? options[:active_storage_direct_url] : false
klass = options[:class]
picture_class = options[:picture_class]
width = options[:width]
height = options[:height]

sizes = Kamifusen.sizes.dup
quality = Kamifusen.quality.dup

if  source&.metadata &&
    source.metadata['analyzed'] &&
    source.metadata.has_key?('width') &&
    source.metadata.has_key?('height')
  image_width = source.metadata['width']
  image_height = source.metadata['height']
  image_ratio = 1.0 * image_width / image_height
  if width.nil? && height.nil?
    # Image real dimensions
    width = [image_width, sizes.last].min
    height = width * image_ratio
  elsif width.nil?
    # Calculated width, preserving the aspect ratio
    width = height * image_ratio
  elsif height.nil?
    # Calculated height, preserving the aspect ratio
    height = width / image_ratio
  else
    # Explicit dimensions. We redefine the height if aspect ratio is not preserved.
    width = [image_width, width].min
    height = width / image_ratio
  end
  width = width.round
  height = height.round
end

parameters = ""
parameters += " loading=\"lazy\" decoding=\"async\"" if async
parameters += " alt=\"#{alt}\"" if alt
parameters += " width=\"#{width}\"" if width
parameters += " height=\"#{height}\"" if height
parameters += " class=\"#{klass}\"" if klass

def kamifusen_process(variant, active_storage_direct_url)
  if active_storage_direct_url
    begin
      # Pour générer la processed url, il faut savoir où sont stockées les images
      # https://discuss.rubyonrails.org/t/define-host-so-absolute-urls-work-in-development-and-test/75085
      # https://stackoverflow.com/questions/60425407/uriinvalidurierror-bad-uriis-not-uri-nil-active-storage-service-url
      url = variant.processed.url
    rescue
      # Not compatible with DiskService, which returns a URI::InvalidURIError
    end
  end
  url ||= url_for(variant)
  url
end
%>
<% if source.variable? %>
  <%
  # Computing
  if width
    width_retina = width * 2
    sizes.reject! { |size| size > width_retina }
    sizes << width_retina
    sizes.uniq!
  end
  default_width = sizes.max
  default_width = width_retina if width_retina && width_retina > default_width
  if Kamifusen.with_webp
    srcset_webp = sizes.map { |size|
      variant = source.variant(resize: "#{size}>", format: :webp, quality: quality)
      "#{ kamifusen_process(variant, active_storage_direct_url) } #{ size }w"
    }.join(', ')
  end
  srcset_default = sizes.map { |size|
    variant = source.variant(resize: "#{size}>", quality: quality)
    "#{ kamifusen_process(variant, active_storage_direct_url) } #{ size }w"
  }.join(', ')
  variant = source.variant(resize: "#{default_width}>", quality: quality)
  default = kamifusen_process(variant, active_storage_direct_url)
  %>
  <picture<%= " class=\"#{picture_class}\"".html_safe unless picture_class.blank? %>>
    <% if Kamifusen.with_webp %>
      <source srcset="<%= srcset_webp %>" type="image/webp">
    <% end %>
    <img src="<%= default %>" srcset="<%= srcset_default %>" type="<%= source.content_type %>"<%= raw parameters %>>
  </picture>
<% else %>
  <picture>
    <img src="<%= url_for source %>" type="<%= source.content_type %>"<%= raw parameters %>>
  </picture>
<% end %>
