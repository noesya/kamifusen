<%
# image_tag options
options ||= {}
alt = options[:alt]
async = options.has_key?(:async)  ? options[:async]
                                  : true
active_storage_direct_url = options.has_key?(:active_storage_direct_url)  ? options[:active_storage_direct_url]
                                                                          : false
klass = options[:class]
picture_class = options[:picture_class]
width = options[:width]
height = options[:height]

# kamifusen settings
sizes = [
  # 360, # Old android
  375, # Old iPhone
  # 414, # ?
  576, # Tablets desktop
  640, # iPhone SE, some tablets
  750, # iPhone 6/7/8, 375@2x
  768, # Old iPads, Old desktops
  # 828, # ?
  # 992, # Breakpoint bootstrap
  1080, # iPhone 6/7/8 plus, 414@2.608 (sorry)
  # 1125, # iPhone 10, 375@3x
  1152,
  # 1172, # iPhone 12, 390@3x
  1200, # Desktop
  1366, # Desktop
  # 1400, # Breakpoint boostrap
  1440, # Samsung Galaxy S20, 360@4x
  1536, # Desktop, some iPads
  1920, # Desktop 2k
  2048, # Some iPad
  2240, # Desktop iMac M1 chipset
  2880, # Desktop MacBook Pro/Air 13" @2x
  3072  # Desktop MacBook Pro 16" @2x
]
quality = 80

if  source&.metadata &&
    source.metadata['analyzed'] &&
    source.metadata.has_key?('width') &&
    source.metadata.has_key?('height')
  image_width = source.metadata['width']
  image_height = source.metadata['height']
  image_ratio = 1.0 * image_width / image_height
  if width.nil? && height.nil?
    # Prendre width et height réelles de l'image
    width = [image_width, sizes.last].min
    height = width * image_ratio
  elsif width.nil?
    # Calculer la height sur ratio
    width = height * image_ratio
  elsif height.nil?
    # Calcule la width sur ratio
    height = width / image_ratio
  else
    # Width et height sont explicites,
    # si le ratio demandé n'est pas celui de l'image,
    # Redéfinir la height
    width = [image_width, width].min
    height = width / image_ratio
  end
  width = width.round
  height = height.round
end
parameters = ""
parameters += " loading=\"lazy\" decoding=\"async\"" if async
parameters += " alt=\"#{ alt }\"" if alt
parameters += " width=\"#{ width }\"" if width
parameters += " height=\"#{ height }\"" if height
parameters += " class=\"#{ klass }\"" if klass

def kamifusen_process(variant, active_storage_direct_url)
  if active_storage_direct_url
    begin
      # Pour générer la processed url, il faut savoir où sont stockées les images
      # https://discuss.rubyonrails.org/t/define-host-so-absolute-urls-work-in-development-and-test/75085
      # https://stackoverflow.com/questions/60425407/uriinvalidurierror-bad-uriis-not-uri-nil-active-storage-service-url
      # Not compatible with Disk storage, will return nil
      url = variant.processed.url
    rescue
    end
  end
  url = url_for(variant) if url.nil?
  url
end
%>
<% if source.variable? %>
  <%#= "#{image_width} x #{image_height}, #{image_ratio} ratio => #{width} x #{height}<br>".html_safe %>
  <%
  # Computing
  if width
    width_retina = width * 2
    sizes.reject! { |size| size > width_retina }
    sizes << width_retina
    sizes.uniq!
  end
  default_width = sizes.max
  default_width = width_retina if width_retina && width_retina > default_width
  if Kamifusen.with_webp
    srcset_webp = sizes.map { |size|
      variant = source.variant(resize: "#{size}>", format: :webp, quality: quality)
      "#{ kamifusen_process(variant, active_storage_direct_url) } #{ size }w"
    }.join(', ')
  end
  srcset_default = sizes.map { |size|
    variant = source.variant(resize: "#{size}>", quality: quality)
    "#{ kamifusen_process(variant, active_storage_direct_url) } #{ size }w"
  }.join(', ')
  variant = source.variant(resize: "#{default_width}>", quality: quality)
  default = kamifusen_process(variant, active_storage_direct_url)
  %>
  <picture<%= " class=\"#{picture_class}\"".html_safe unless picture_class.blank? %>>
    <% if Kamifusen.with_webp %>
      <source srcset="<%= srcset_webp %>" type="image/webp">
    <% end %>
    <img src="<%= default %>" srcset="<%= srcset_default %>" type="<%= source.content_type %>"<%= raw parameters %>>
  </picture>
<% else %>
  <picture>
    <img src="<%= url_for source %>" type="<%= source.content_type %>"<%= raw parameters %>>
  </picture>
<% end %>
